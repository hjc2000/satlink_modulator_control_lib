@page "/"
@using ModulatorLib;

<body>
	<div style="margin-bottom:1em;">
		<input style="width:100%" @bind="_requestUrl" />
	</div>
	@foreach (KeyValuePair<string, FormItem> pair in _form)
	{
		var key = pair.Key;
		var formItem = pair.Value;

		<div>
			<span>@key:</span>
			@switch (formItem.Type)
			{
			case "FormItem":
				{
					<input @bind="formItem.Value" />
					break;
				}
			case "SelectTag":
				{
					var selectItem = (SelectTag)formItem;
					var options = selectItem.Options;
					<select @bind="selectItem.Value">
						@foreach (string option in options)
						{
							<option>@option</option>
						}
					</select>
					break;
				}
			}
		</div>
	}
	<div>
		<button @onclick="OnSubmitButtonClick">提交按钮</button>
		<button @onclick="OnNextFreq">下一个频率</button>
		<button @onclick="OnFlush">刷新</button>
	</div>
</body>

@code
{
#nullable enable
	HtmlForm _form = new();
	HttpClient _client = new();
	//string _requestUrl = @"http://localhost:8051/Modulator_files/MainInfo.html";
	string _requestUrl = @"http://192.168.1.15/ChannelSetup.htm";
	SelectTag? _channelSelectTag = null;
	int _channelIndex = 0;

	void ParseHtml(string response)
	{
		_form.ParseHtml(response);
		_form.Items.Remove("send");
		_form.Items.Remove("freq");

		_channelSelectTag = (SelectTag)_form["channel"];
		_channelIndex = _channelSelectTag.Options.FindIndex((str) =>
		{
			if (str == _channelSelectTag.Value)
			{
				return true;
			}
			return false;
		});
	}

	async void OnSubmitButtonClick()
	{
		string postStr = _form.ToString();
		StringContent stringContent = new StringContent(postStr);
		var message = await _client.PostAsync(_requestUrl, stringContent);
		string response = await message.Content.ReadAsStringAsync();
		ParseHtml(response);
		StateHasChanged();
	}

	void OnNextFreq()
	{
		if (_channelSelectTag != null)
		{
			_channelIndex++;
			if (_channelIndex >= _channelSelectTag.Options.Count)
			{
				_channelIndex = 0;
			}
			_channelSelectTag.Value = _channelSelectTag.Options[_channelIndex];
			OnSubmitButtonClick();
		}
	}

	async Task OnFlush()
	{
		HttpResponseMessage responseMessage = await _client.GetAsync(_requestUrl);
		if (responseMessage.IsSuccessStatusCode)
		{
			HttpContent content = responseMessage.Content;
			string response = await content.ReadAsStringAsync();
			ParseHtml(response);
		}
	}
}